/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles
 * at the University of Florida, Spring 2018.
 * <p>
 * This software is solely for the educational benefit of students
 * enrolled in the course during the Spring 2018 semester.
 * <p>
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 *
 * @Beverly A. Sanders, 2018
 */

package cop5556sp18;

import cop5556sp18.AST.Program;
import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;

import static org.junit.Assert.assertEquals;

public class CodeGenTest {

    //sets the default width and height of newly created images.  Should be small enough to fit on screen.
    public static final int defaultWidth = 980;
    public static final int defaultHeight = 1024;
    //determines whether show prints anything
    static boolean doPrint = true;
    //determines whether a classfile is created
    static boolean doCreateFile = false;
    @Rule
    public ExpectedException thrown = ExpectedException.none();
    //values passed to CodeGenerator constructor to control grading and debugging output
    private boolean devel = true; //if true, print devel output

    //	private boolean devel = false;
//	private boolean grade = false; 
    private boolean grade = true; //if true, print grade output

    static void show(Object s) {
        if (doPrint) {
            System.out.println(s);
        }
    }

    /**
     * Generates bytecode for given input.
     * Throws exceptions for Lexical, Syntax, and Type checking errors
     *
     * @param input String containing source code
     * @return Generated bytecode
     * @throws Exception
     */
    byte[] genCode(String input) throws Exception {

        //scan, parse, and type check
        Scanner scanner = new Scanner(input);
        show(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        Program program = parser.parse();
        TypeChecker v = new TypeChecker();
        program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

        //generate code
        CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
        byte[] bytecode = (byte[]) program.visit(cv, null);
        show(program); //doing it here shows the values filled in during code gen
        //display the generated bytecode
        show(CodeGenUtils.bytecodeToString(bytecode));

        //write byte code to file
        if (doCreateFile) {
            String name = program.progName;
            String classFileName = "bin/" + name + ".class";
            OutputStream output = new FileOutputStream(classFileName);
            output.write(bytecode);
            output.close();
            System.out.println("wrote classfile to " + classFileName);
        }

        //return generated classfile as byte array
        return bytecode;
    }

    /**
     * Run main method in given class
     *
     * @param className
     * @param bytecode
     * @param commandLineArgs String array containing command line arguments, empty array if none
     * @throws +
     * @throws Throwable
     */
    void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
        RuntimeLog.initLog(); //initialize log used for grading.
        DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
        Class<?> testClass = loader.define(className, bytecode);
        @SuppressWarnings("rawtypes")
        Class[] argTypes = {commandLineArgs.getClass()};
        Method m = testClass.getMethod("main", argTypes);
        show("Output from " + m + ":");  //print name of method to be executed
        Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
        try {
            m.invoke(null, passedArgs);
        } catch (Exception e) {
            Throwable cause = e.getCause();
            if (cause instanceof Exception) {
                Exception ec = (Exception) e.getCause();
                throw ec;
            }
            throw e;
        }
    }


    /**
     * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
     * To prevent this behavior, waitForKey will pause until a key is pressed.
     *
     * @throws IOException
     */
    void waitForKey() throws IOException {
        System.out.println("enter any char to exit");
        System.in.read();
    }

    /**
     * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
     * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
     *
     * @throws Exception
     */
    void keepFrame() throws Exception {
        Thread.sleep(5000);
    }


    /**
     * Since we are not doing any optimization, the compiler will
     * still create a class with a main method and the JUnit test will
     * execute it.
     * <p>
     * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
     *
     * @throws Exception
     */
    @Test
    public void emptyProg() throws Exception {
        String prog = "emptyProg";
        String input = prog + "{}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void integerLit() throws Exception {
        String prog = "intgegerLit";
        String input = prog + "{int a; int b; a := 3; show a + 0;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test

    public void inputInteger() throws Exception {

        String prog = "Huz";

        String input = prog + "{int f; input f from @0; show f;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"69"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());

    }


    @Test

    public void inputFloat() throws Exception {

        String prog = "Huz";

        String input = prog + "{float f; input f from @0; show f;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"6.9"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());

    }


    @Test

    public void inputBool() throws Exception {


        String prog = "Huz";

        String input = prog + "{boolean f; input f from @0; show f;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

    }


    @Test

    public void opPlusI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; int b; a := 10 ; b := 2; show (a+b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

    }


    @Test

    public void opMinI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; int b; a := 10 ; b := 2; show (a-b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opMulI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; int b; a := 10 ; b := 2; show (a*b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;20;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opDivI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; int b; a := 10 ; b := 2; show (a/b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;5;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opModI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; int b; a := 10 ; b := 2; show (a%b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;0;leaving main;", RuntimeLog.globalLog.toString());

    }

    @Test
    public void readImageFromCommandLineAndScale() throws Exception {
        String prog = "Q";
        String input = prog + "{image y[300,400];input y from @ 0 ;show y;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        //assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());

// 		java.lang.VerifyError: Bad type on operand stack
// 		Exception Details:
// 		  Location:
// 		    prog.main([Ljava/lang/String;)V @6: invokestatic
// 		  Reason:
// 		    Type long_2nd (current frame, stack[5]) is not assignable to integer
// 		  Current Frame:
// 		    bci: @6
    }

    @Test
    public void showTits1() throws Exception {

        String prog = "Huz";

        String input = prog + "{image y[300,400];\n input y from @ 0 ; show y;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());

    }

    @Test

    public void opAddF() throws Exception {


        String prog = "Huz";

        String input = prog + "{float a; float b; a := 6.9 ; b := 3.1 ; show (a+b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;10.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opMulF() throws Exception {


        String prog = "Huz";

        String input = prog + "{float a; float b; a := 5.5 ; b := 2.0 ; show (a*b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;11.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opDivF() throws Exception {

        String prog = "Huz";

        String input = prog + "{float a; float b; a := 11.0 ; b := 2.0 ; show (a/b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;5.5;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opOrI() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 1 ; b := 2 ; show (a|b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opAndI() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 1 ; b := 2 ; show (a&b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opPowI() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 2; b := 3 ; show (a**b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opPowII() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 2; b := 3 ; show (a**b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opPowF() throws Exception {

        String prog = "Huz";

        String input = prog + "{float a; float b; a := 2.0; b := 3.0 ; show (a**b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opPowFI() throws Exception {


        String prog = "Huz";

        String input = prog + "{int a; float b; a := 2; b := 3.0 ; show (a**b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void opPowIF() throws Exception {


        String prog = "Huz";

        String input = prog + "{float a; int b; a := 2.0; b := 3; show (a**b);} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;8.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void fnSin() throws Exception {


        String prog = "Huz";

        String input = prog + "{float a; a := 2.0; show (sin (a));} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;0.9092974;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void fnAbsI() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := -2; show (abs(a));} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void fnAbsF() throws Exception {

        String prog = "Huz";

        String input = prog + "{float a; a := -2.0; show (abs(a));} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void fnI2F() throws Exception {

        String prog = "Huz";

        String input = prog + "{float a; int b; b := 69; a := float(b); show a;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;69.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void fnF2I() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; float b; b := 69.696969; a := int(b); show a;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;69;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void inputIF() throws Exception {

        String prog = "Huz";

        String input = prog + "{int i; float f; boolean b ; input i from @0 ; input f from @1 ; input b from @2; show i; show f;} ";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"69", "6.9", "true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;69;6.9;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void if1() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 7; int biz; biz := 3; if (a == biz) {show a;}; show biz;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void if2() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 7; int biz; biz := 3; if (a == a) {show a;}; show biz;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;7;3;leaving main;",RuntimeLog.globalLog.toString());

    }


    @Test

    public void while1() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 7; int b; b := 7; show b;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;7;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void while2() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 7; int b; b := 3; while (a == b) {a := 3; show a;}; }";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void whileGE() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 2; while (a >= 0) {show a; a := a - 1;};}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2;1;0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void whileL() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; a := 2; while (0 < a) {show a; a := a - 1;};}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void ifFloatL() throws Exception {

        String prog = "Huz";

        String input = prog + "{float a; float b; a := 2.0; b := 2.0; if (a >= b) {show a;};}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/qhj7asq", "true"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2.0;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void showTits() throws Exception {

        String prog = "Huz";

        String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu", "writtenImage1.png"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());

    }

    @Test

    public void conditional1() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 1; b :=2; show ( a==b ? a : b );}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    public void conditional2() throws Exception {

        String prog = "Huz";

        String input = prog + "{int a; int b; a := 1; b :=2; show ( a==a ? a : b );}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());

    }


    @Test

    //This will show a small red image

    public void red1() throws Exception {

        String prog = "Huz";

        String input = prog + "{image im[256,256];" +
                "int x;" +
                "int y;" +
                "x:=0;" +
                "y:=0;" +
                "while(x<width(im)) {" +
                "y:=0;" +
                "while(y<height(im)) {" +
                "im[x,y]:=<<255,255,0,0>>;" +
                "y:=y+1;};" +
                "x:=x+1;};" +
                "show im; " +
                "sleep 333;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());

    }


    @Test

    //This will show the G logo and then invert the colors

    public void invertColors() throws Exception {

        String prog = "Huz";

        String input = prog + "{image bird; input bird from @0;show bird;sleep(700);image bird2[width(bird),height(bird)];int x;x:=0;while(x<width(bird2)) {int y;y:=0;while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]);green(bird2[x,y]):=blue(bird[x,y]);red(bird2[x,y]):=green(bird[x,y]);alpha(bird2[x,y]):=Z;y:=y+1;};x:=x+1;};show bird2;sleep(1000);}";

        //String input = prog + "{image bird; input bird from @0;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());

    }


    @Test

    //This will show the G logo and then invert the image

    public void invertImage() throws Exception {

        String prog = "Huz";

        String input = prog + "{image h;input h from @0;" +
                "show h;" +
                "sleep(1000); " +
                "image g[width(h),height(h)];" +
                "int x;" +
                "x:=0;" +
                "while(x<width(g)){" +
                "int y;" +
                "y:=0;" +
                "while(y<height(g)){ " +
                "g[x,y] := h[x,y] ;" +
                // "show g;"+
                "y:=y+1;};" +
                "x:=x+1;};" +
                "show g;" +
                "sleep(700);}";

        //String input = prog + "{image bird; input bird from @0;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

        //assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());

    }

    @Test

    //This will show a sexy blue image

    public void PolarImage() throws Exception {

        String prog = "Huz";

        String input = prog + "{image im[1024,1024]; int x; x:=0; while(x<width(im)) {int y; y:=0; while(y<height(im)) "

                + "{float p; p := polar_r[x,y]; int r;r:=int(p)%Z;im[x,y]:=<<Z,0,0,r>>; y:=y+1;}; x:=x+1;}; show im; sleep 3333;}";

        byte[] bytecode = genCode(input);

        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};

        runCode(prog, bytecode, commandLineArgs);

        show("Log:\n" + RuntimeLog.globalLog);

    }

    @Test
    public void Prog1() throws Exception {
        String prog = "prog{image y[512,256];\n  show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        //assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog2() throws Exception {
        String prog = "prog{show Z; show default_width; show default_height;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;255;980;1024;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog3() throws Exception {
        String prog = "prog{image y; input y from @ 0 ; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog4() throws Exception {
        String prog = "prog{int x; input x from @ 0 ; show x;\nfloat y; input y from @ 1; show y;\nboolean z; input z from @ 2; show z;\ninput z from @ 3; show z;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"1", "1.0", "true", "false"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;1;1.0;true;false;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog5() throws Exception {
        String prog = "prog{show 9 + 4;show 9 - 4;show 9 * 4;show 9 / 4;show 9 ** 4;show 9 % 4;show 9 & 4;show 9 | 4;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;13;5;36;2;6561;1;0;13;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog6() throws Exception {
        String prog = "prog{show 9.1 + 4.5;show 9.1 - 4.5;show 9.1 * 4.5;show 8.82 / 4.2;show 9.1 ** 4.1;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;13.6;4.6000004;40.95;2.1;8552.039;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog7() throws Exception {
        String prog = "prog{show 9 + 4.5;show 9 - 4.5;show 9 * 4.5;show 8 / 4.2;show 9 ** 4.1;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;13.5;4.5;40.5;1.904762;8173.239;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog8() throws Exception {
        String prog =
                "prog{show 9.1 + 4;show 9.1 - 4;show 9.1 * 4;show 8.2 / 4;show 9.1 ** 4;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;13.1;5.1000004;36.4;2.05;6857.497;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog9() throws Exception {
        String prog = "prog{sleep 2000;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog10() throws Exception {
        String prog = "prog{show !false; show !true; show !(true | false); show !(true & false);} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;true;false;false;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog11() throws Exception {
        String prog = "prog{show !1; show !-1; show !0; show !-2;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-2;0;-1;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog12() throws Exception {
        String prog = "prog{boolean y; y := true; show y; y := false; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;true;false;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog13() throws Exception {
        String prog = "prog{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog14() throws Exception {
        String prog = "prog{image y;\n  show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog15() throws Exception {
        String prog = "prog{filename f1;\n filename f2; \n input f1 from @ 0 ;\n f2 := f1;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog17() throws Exception {
        String prog = "prog{show -3; show -4.5; show -3-4.5;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-3;-4.5;-7.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog18() throws Exception {
        String prog = "prog{image y[300,400];\n  input y from @ 0 ;\n show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog19() throws Exception {
        String prog = "prog{float y; y := 6.6; show y; y := -0.5; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;6.6;-0.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog20() throws Exception {
        String prog = "prog{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog21() throws Exception {
        String prog = "prog{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog22() throws Exception {
        String prog = "prog{image b[512,256]; show width(b); show height(b);image c; show width(c); show height(c);} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;512;256;980;1024;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog23() throws Exception {
        String prog = "prog{show abs(1); show abs(-1); show abs(5.3); show abs(-5.3); show abs(1-5.3);}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;1;1;5.3;5.3;4.3;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog24() throws Exception {
        String prog = "prog{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;91;205;21;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog25() throws Exception {
        String prog = "prog{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog26() throws Exception {
        String prog = "prog{float a; a := float(-3.7); show a; a := float(4); show a;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-3.7;4.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog27() throws Exception {
        String prog = "prog{int a; a := int(-3.7); show a; a := int(4); show a;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-3;4;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog28() throws Exception {
        String prog = "prog{show sin(10.0); show cos(-10.0);}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-0.5440211;-0.8390715;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog29() throws Exception {
        String prog = "prog{show log(1.0); show atan(0.5);}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;0.0;0.4636476;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog30() throws Exception {
        String prog = "prog{show 1 + 2 * 3 + 4;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;11;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog31() throws Exception {
        String prog = "prog{show 1 --2 * 3 & 14;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;6;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog32() throws Exception {
        String prog = "prog{show 5 * 2 / 3;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog33() throws Exception {
        String prog = "prog{show 4 ** 3 ** 2;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;262144;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog34() throws Exception {
        String prog = "prog{int y; y := 55; show y; y := -234; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;55;-234;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog35() throws Exception {
        String prog = "writeImageToFile{image y;\n filename f;\n input y from @ 0 ; input f from @1; \n show y; write y to f;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu", "D:\\PLP\\Assignment_5\\a.png"};
        runCode("writeImageToFile", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog36() throws Exception {
        String prog = "prog{image y[512,256];\n  show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog37() throws Exception {
        String prog = "prog{image y[20,20]; show y[12,14]; y[12,14] := 1234567890; show y[12,14];}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;0;1234567890;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog38() throws Exception {
        String prog = "prog{image y[20,20]; show y[12,20]; y[12,20] := 1234567890; show y[12,20];}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;0;0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog39() throws Exception {
        String prog = "writeTransparentImage{ image im[256,256]; " +
                "\nfilename f; " +
                "\ninput f from @0; " +
                "\nint x;\n" +
                " int y; " +
                "\nx := 0; " +
                "\ny := 0; " +
                "\nwhile (x < width(im)){ " +
                    "\n y := 0; " +
                    "while (y < height(im)){" +
                        "\nim[x,y] := <<255,255,0,0>>; " +
                        "\nint z; " +
                        "z := im[x,y];" +
                        "y := y + 1; \n};" +
                    "\nx := x + 1;};" +
                "\nwrite im to f;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"D:\\PLP\\Assignment_5\\b.png"};
        runCode("writeTransparentImage", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog40() throws Exception {
        String prog = "blockScope{int x; x:=5; if(true){ int x; x := 6; show x; }; show x;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("blockScope", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;6;5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog41() throws Exception {
        String prog = "blockScope{if(true){ int x; }; int x; x := 5; show x;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("blockScope", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog42() throws Exception {
        String prog = "blockScope{ int x; x := 5; \nif(true) { \n   int x; x := 6; \n   if(false) { \n      int x; x := 7; int y; \n   }; \n   show x; \n}; \nshow x; }";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("blockScope", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;6;5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog43() throws Exception {
        String prog = "prog{show true ? -+5 : 9;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;-5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog44() throws Exception {
        String prog = "prog{show false ? -+5 : 9;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;9;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog45() throws Exception {
        String prog = "prog{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy; sleep 1000;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog46() throws Exception {
        String prog = "prog{image y;\n  show y;} ";
        byte[] bytecode = genCode(prog);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog47() throws Exception {
        String prog = "prog{image y[300,400];\n  input y from @ 0 ;\n show y; sleep 1000;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog48() throws Exception {
        String prog = "prog{float a; a := polar_a[100, 7]; show a;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;0.069886;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog49() throws Exception {
        String prog = "lhssample{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nalpha(im[x,y]) := 255;\nred(im[x,y]) := 0;\ngreen(im[x,y]) := x+y;\nblue(im[x,y]) := 0; \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n sleep 1000;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("lhssample", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog50() throws Exception {
        String prog = "writeModifiedImage{ image im; \ninput im from @0; \nfilename f; \ninput f from @1; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>; \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu","D:\\PLP\\Assignment_5\\d.png"};
        runCode("writeModifiedImage", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog51() throws Exception {
        String prog = "colorExpressions2{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,0,x+y,0>>; \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n sleep 1000;}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("colorExpressions2", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog52() throws Exception {
        String prog = "writeRedImage{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,255,0,0>>; \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"D:\\PLP\\Assignment_5\\d.png"};
        runCode("writeRedImage", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog53() throws Exception {
        String prog = "prog{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog54() throws Exception {
        String prog = "prog{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"D:\\PLP\\Assignment_5\\c.png"};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void Prog55() throws Exception {
        String prog = "prog{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);} ";
        String input = prog;
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode("prog", bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;512;256;980;1024;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void integerLitShow() throws Exception {
        String prog = "intgegerLit";
        String input = prog + "{show 3;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatLitShow() throws Exception {
        String prog = "floatLit";
        String input = prog + "{show 3.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;3.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void booleanLitShow() throws Exception {
        String prog = "booleanLit";
        String input = prog + "{show true;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void imageLitShow() throws Exception {
        String prog = "imageLit";
        String input = prog + "{image a; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declaration0() throws Exception {
        String prog = "intLit";
        String input = prog + "{int a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declaration1() throws Exception {
        String prog = "floatLit";
        String input = prog + "{float a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declaration2() throws Exception {
        String prog = "booleanLit";
        String input = prog + "{boolean a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declaration3() throws Exception {
        String prog = "imageLit";
        String input = prog + "{image a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declaration4() throws Exception {
        String prog = "imageLit2";
        String input = prog + "{image a[3, 4];} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign0() throws Exception {
        String prog = "booleanLit";
        String input = prog + "{int a; a := 2;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign1() throws Exception {
        String prog = "floatLit";
        String input = prog + "{float a; a := 2.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign2() throws Exception {
        String prog = "booleanLit";
        String input = prog + "{boolean a; a := true;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign3() throws Exception {
        String prog = "imageLit";
        String input = prog + "{image a; image b; a := b;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign4() throws Exception {
        String prog = "imageLit";
        String input = prog + "{image a[1,2]; image b[3,4]; a := b;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

//    @Test
//    public void declareAndAssign5() throws Exception {
//        String prog = "fileLit";
//        String input = prog + "{filename a; filename b; a := b;} ";
//        System.out.println(input);
//        byte[] bytecode = genCode(input);
//        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
//        runCode(prog, bytecode, commandLineArgs);
//        show("Log:\n"+RuntimeLog.globalLog);
//        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
//    }

    @Test
    public void declareAndAssign6() throws Exception {
        String prog = "intLit";
        String input = prog + "{int a; int b; b := 5; a := b + 5; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign7() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; int b; b := 5; a := b + 5.0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;10.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign8() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.0; a := b + 5;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign9() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.0; a := b + 5.0;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign10() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.0; a := b - 6.0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;-1.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign11() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{boolean a; boolean b; b := true; a := b & false;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign12() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int a; int b; b := 10; a := b % 3;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign13() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int a; int b; b := 10; a := b | 3;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign14() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{boolean a; boolean b; b := true; a := b | false;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign15() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;25;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign16() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;30.25;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign17() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;35.872494;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign18() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; float b; b := 5.2; a := 2 ** b; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign19() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float a; int b; b := 7; a := b / 2.0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void sleep0() throws Exception {
        String prog = "sleepProgram";
        String input = prog + "{sleep 1000;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionUnary0() throws Exception {
        String prog = "unary";
        String input = prog + "{int a; a := !1; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;-2;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionUnary1() throws Exception {
        String prog = "unary1";
        String input = prog + "{boolean a; a := !true; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionUnary2() throws Exception {
        String prog = "unary1";
        String input = prog + "{int a; int b; b := 5; a := -b; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;-5;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionPredefinedName0() throws Exception {
        String prog = "predef";
        String input = prog + "{int a; a := Z+5; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;260;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionPredefinedName1() throws Exception {
        String prog = "predef";
        String input = prog + "{int a; a := default_height+default_width; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;2004;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg0() throws Exception {
        String prog = "predef";
        String input = prog + "{int a; a := 5; show float(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg1() throws Exception {
        String prog = "predef";
        String input = prog + "{float a; a := 5.0; show int(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg2() throws Exception {
        String prog = "predef";
        String input = prog + "{float a; a := 180.0; show sin(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;-0.80115265;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg3() throws Exception {
        String prog = "predef";
        String input = prog + "{float a; a := -180.0; show abs(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;180.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg4() throws Exception {
        String prog = "predef";
        String input = prog + "{image a; show height(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg5() throws Exception {
        String prog = "predef";
        String input = prog + "{image a; show width(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;980;leaving main;",RuntimeLog.globalLog.toString());
    }


    @Test
    public void expressionFunctionAppWithExpressionArg6() throws Exception {
        String prog = "predef";
        String input = prog + "{image a[103, 103]; show width(a);} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;103;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithExpressionArg7() throws Exception {
        String prog = "predef";
        String input = prog + "{int foo; foo := int(4.0); show foo;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void lhsIdent0() throws Exception {
        String prog = "predef";
        String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void lhsIdent1() throws Exception {
        String prog = "predef";
        String input = prog + "{int foo; int a; a := 5; foo := a; show foo;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInput0() throws Exception {
        String prog = "si";
        String input = prog + "{int a; input a from @ 0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInput1() throws Exception {
        String prog = "si";
        String input = prog + "{float a; input a from @ 1; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInput2() throws Exception {
        String prog = "si";
        String input = prog + "{filename a; input a from @ 0;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionIdent3() throws Exception {
        String prog = "sif";
        String input = prog + "{int a; a := 5; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
    }

    // int also checked
    @Test
    public void expressionBinaryEQ_int() throws Exception {
        String prog = "sif";
        String input = prog + "{show 1 == 1;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryEQ_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true == false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryEQ_float0() throws Exception {
        String prog = "sif";
        String input = prog + "{show 1.0 == 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }


    // to be done
    @Test
    public void expressionBinaryEQ_float() throws Exception {
        String prog = "sif";
        String input = prog + "{float a; a := 5.0; float b; b:= 5.0; boolean status; status := (a==b); show status;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }


    @Test
    public void expressionBinaryNEQ_int() throws Exception {
        String prog = "sif";
        String input = prog + "{show 1 != 2;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryNEQ_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true != true;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryNEQ_float() throws Exception {
        String prog = "sif";
        String input = prog + "{show 1.0 != 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGT_int() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2 > 1;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGT_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true > false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGT_float() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2.0 > 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGE_int() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2 >= 1;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGE_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true >= false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryGE_float() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2.0 >= 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLE_int() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2 <= 1;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLE_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true <= false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLE_float() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2.0 <= 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLT_int() throws Exception {
        String prog = "sif";
        String input = prog + "{int a; a := 2; boolean b; b := a < 1; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLT_boolean() throws Exception {
        String prog = "sif";
        String input = prog + "{show true < false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionBinaryLT_float() throws Exception {
        String prog = "sif";
        String input = prog + "{show 2.0 < 1.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIf0() throws Exception {
        String prog = "sif";
        String input = prog + "{int a; a := 5; int b; b:= 5; if(a == b){ show 2;};} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementWhile0() throws Exception {
        String prog = "swhile";
        String input = prog + "{int a; a := 5; while(a >= 0){ show a; a := a - 1; }; } ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;5;4;3;2;1;0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void functionApplicationWithExpressionArg0() throws Exception{
        String prog = "redfunc";
        String input = prog + "{int a; a := 123456789; show red(a); show green(a); show blue(a); }";
        byte[] bytecode = genCode(input);
        String[] cmdArgs = {};
        runCode(prog, bytecode, cmdArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;91;205;21;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void functionApplicationWithExpressionArg1() throws Exception{
        String prog = "redfunc";
        String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a); }";
        byte[] bytecode = genCode(input);
        String[] cmdArgs = {};
        runCode(prog, bytecode, cmdArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void declareAndAssign181() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{image y; input y from @ 0 ; show y; sleep 1000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://tinyurl.com/ybdmdbvu"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel0() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int res; res := cart_x[2.236068, 1.1071488]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel1() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int res; res := cart_y[2.236068, 1.1071488]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel2() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float res; res := polar_r[1, 2]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;2.236068;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel3() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float res; res := polar_a[1, 2]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;1.1071488;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressioPixel0() throws Exception {
        String prog = "expressionPixel";
        String input = prog + "{image a; input a from @ 0; show width(a); show height(a); show red(a[1,2]);} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;399;399;247;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressioPixel1() throws Exception {
        String prog = "expressionPixel";
        String input = prog + "{image a; input a from @ 0; a[1,2] := <<200, 200, 0, 255>>; } ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionSamplePixel1() throws Exception {
        String prog = "expressionPixel";
        String input = prog + "{image a; input a from @ 0; red(a[1,2]) := 255; show red(a[1,2]); } ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;255;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressioBinary0() throws Exception {
        String prog = "expressionPixel";
        String input = prog + "{show 1.5 < 3.4; } ";

        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementWrite0() throws Exception {
        String prog = "makeRedImage";
        String input = prog + " { image im[256,256]; int x; int y; filename dest; input dest from @ 0;  x := 0; y := 0; while (x < width(im)) { y := 0; while (y < height(im)) { im[x,y] := <<255,255,0,0>>; y := y+1; }; x := x+1; }; show im; sleep 4000; write im to dest; }";

        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"red_image.png"}; //create command line argument array to initialize params, none in this case

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
        //assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
    }

    @Test
    public void testDemo1() throws Exception {
        String prog = "demo1";
        String input = prog + " { \n" + "image h; \n" + "input h from @0; \n" + "show h; \n" + "sleep(4000); \n"
                + "image g[width(h),height(h)]; \n" + "int x; \n" + "x:=0; \n" + "while(x<width(g)){int y; \n"
                + "y:=0; \n" + "while(y<height(g)){g[x,y]:=h[y,x]; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+1; \n" + "}; \n"
                + "show g; \n" + "sleep(4000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
    }

    @Test
    public void testPolarR2() throws Exception {
        String prog = "PolarR2";
        String input = prog + " { \n" + "image im[1024,1024]; \n" + "int x; \n" + "x := 0; \n"
                + "while (x < width(im)) { \n" + "int y; \n" + "y := 0; \n" + "while (y < height(im)) { \n"
                + "float p; \n" + "p := polar_r[x,y]; \n" + "int r; \n" + "r := int(p) % Z; \n"
                + "im[x,y] := <<Z, 0, 0, r>>; \n" + "y := y+1; \n" + "}; \n" + "x := x + 1; \n" + "}; \n"
                + "show im; sleep(4000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
    }


    @Test
    public void testSamples() throws Exception {
        String prog = "samples";
        String input = prog + " { \n" + "image bird; \n" + "input bird from @0; \n" + "show bird; \n"
                + "sleep(1000); \n" + "image bird2[width(bird),height(bird)]; \n" + "int x; \n" + "x:=0; \n"
                + "while(x<width(bird2)) {int y; \n" + "y:=0; \n"
                + "while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]); \n"
                + "green(bird2[x,y]):=blue(bird[x,y]); \n" + "red(bird2[x,y]):=green(bird[x,y]); \n"
                + "alpha(bird2[x,y]):=Z; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+       1; \n" + "}; \n" + "show bird2; \n"
                + "sleep(1000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRr-Wyns9byAXGPhFp28TiviVwEbUS8IkbwRoUzmF1Wk4YbQMedkA"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n"+RuntimeLog.globalLog);
    }

    @Test
    public void test01() throws Exception {
        String prog = "intDeclare";
        String input = prog + "{int a;a:=2;float b; b := 4.0;show a;show b;show a**b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test02() throws Exception {
        String prog = "testSleep";
        String input = prog + "{sleep(4000);} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        //assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void test03() throws Exception {
        String prog = "testFunctions";
        String input = prog + "{float f;f:=1.0;float s;s:=log(f);show s;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test04() throws Exception {
        String prog = "testFunctions";
        String input = prog + "{int x;x:=-1;int y;y:=abs(13-50);show x;show y;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test05() throws Exception {
        String prog = "testUnary";
        String input = prog + "{int a;a:=10;show(!a);} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test06() throws Exception {
        String prog = "testUnarybool";
        String input = prog + "{boolean a;a:=false;show(!a);} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test07() throws Exception {
        String prog = "testImage1";
        String input = prog + "{image a[200,300];show a;/*sleep(5000);*/} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        System.out.println("stopped for convenience");
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test08() throws Exception {
        String prog = "testFile";
        String input = prog + "{filename f;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test09() throws Exception {
        String prog = "testfilename2";
        String input = prog + "{image a;input a from @ 0;show(a);} ";
        byte[] bytecode = genCode(input);
        // String[] commandLineArgs = { "E:\\Back.JPG" };
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test10() throws Exception {
        String prog = "testLocation";
        String input = prog + "{int a;input a from @ 1;show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = { "3", "4" };
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test11() throws Exception {
        String prog = "testImage";
        String input = prog + "{image a;input a from @ 0;image b;b:=a;show(b);} ";
        byte[] bytecode = genCode(input);
        //String[] commandLineArgs = { "E:\\Back.JPG" };
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test12() throws Exception {
        String prog = "testscope";
        String input = prog + "{int a;int b;a:=10;b:=20;int c;c := a+b;int d;d:= a-b;show(c);show(d);} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test13() throws Exception {
        String prog = "testor";
        String input = prog + "{show true|false;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test14() throws Exception {
        String prog = "testNot";
        String input = prog + "{show !1; show !-1; show !0; show !-2;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test15() throws Exception {
        String prog = "testInt";
        String input = prog + "{int a; a := int(-3.7); show a; a := int(4); show a;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test16() throws Exception {
        String prog = "testFloat";
        String input = prog + "{float a; a := float(-3.7); show a; a := float(4); show a;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test17() throws Exception {
        String prog = "testAlpha";
        String input = prog + "{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test18() throws Exception {
        String prog = "testColors";
        String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test19() throws Exception {
        String prog = "testDimensions";
        String input = prog
                + "{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test20() throws Exception {
        String prog = "testImageCopy";
        String input = prog
                + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;}";
        byte[] bytecode = genCode(input);
        // String[] commandLineArgs = { "E:\\Back.JPG" };
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test21() throws Exception {
        String prog = "testArgs";
        String input = prog
                + "{int x; input x from @ 0 ; show x;\nfloat y; input y from @ 1; show y;\nboolean z; input z from @ 2; show z;\ninput z from @ 3; show z;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = { "2", "3.14", "false", "true" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test22() throws Exception {
        String prog = "testArgs2";
        String input = prog + "{int x; input x from @ 0; show (x); int y; input y from @ 0; show (y);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = { "2", "3.14", "false", "true" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test23() throws Exception {
        String prog = "testPolar";
        String input = prog + "{show(cart_x[polar_r[4,2],polar_a[4,2]]);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test24() throws Exception {
        String prog = "testlhspixel";
        String input = prog + "{image x;input x from @ 0;show(x);show(x[2,4]);x[2,4] := 5;show(x[2,4]);}";
        byte[] bytecode = genCode(input);
        //String[] commandLineArgs = {"E:\\Back.JPG"};
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test25() throws Exception {
        String prog = "testWrite";
        String input = prog + "{image x;input x from @ 0;show(x);filename y;input y from @ 1;write x to y;}";
        byte[] bytecode = genCode(input);
        // String[] commandLineArgs = {"E:\\Back.JPG", "E:\\Back0002.JPG"};
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu", "D:\\PLP\\Assignment_5\\d.png" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test26() throws Exception {
        String prog = "testPixelSelector";
        String input = prog + "{image x;input x from @ 0;show(x[3,4]);}";
        byte[] bytecode = genCode(input);
        // String[] commandLineArgs = {"E:\\Back.JPG"};
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test27() throws Exception {
        String prog = "testColors";
        String input = prog + "{image x;input x from @ 0;show(red(x[3,4]));}";
        byte[] bytecode = genCode(input);
        // String[] commandLineArgs = {"E:\\Back.JPG"};
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test28() throws Exception {
        String prog = "testIfInt";
        String input = prog + "{int x; x:=3; if (x == 0) {show(10);};show(20);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test31() throws Exception {
        String prog = "testIffloat";
        String input = prog + "{float x; x:=3.5; if (x <= 3.4) {show(10);};show(20);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test35() throws Exception {
        String prog = "testIfboolean";
        String input = prog + "{boolean x; x:=true; if (x < false) {show(10);};show(20);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test29() throws Exception {
        String prog = "testexpcond";
        String input = prog + "{int x;int y; x:=3; show x < 0 ? 4 : 5;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test30() throws Exception {
        String prog = "textPixelConst";
        String input = prog + "{image im[256,256];int x;int y;x:=10;y:=20;im[x,y]:=<<255,255,0,0>>;show(im[x,y]);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test38() throws Exception {
        String prog = "test2";
        String input = prog+ "{float x;x:=9.1;float y;y:=4.1;show(x-y);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test39() throws Exception {
        String prog = "testPixelPolar";
        String input = prog+ "{image x; input x from @ 0; x[0.5,1.0] := 0;show(x);sleep(4000);}";
        byte[] bytecode = genCode(input);
        //String[] commandLineArgs = {"E:\\Back.JPG"};
        String[] commandLineArgs = { "https://tinyurl.com/ybdmdbvu" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }

    @Test
    public void test40() throws Exception {
        String prog = "testWhileCond";
        String input = prog+ "{int x; x:=10;while (x > 0) {show(x); x:=x-1;};}";
        byte[] bytecode = genCode(input);
        //String[] commandLineArgs = {"E:\\Back.JPG"};
        String[] commandLineArgs = { "/cise/homes/rpoloju/Back.JPG" };
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        // assertEquals("entering main;3;leaving main;",
        // RuntimeLog.globalLog.toString());
    }
}